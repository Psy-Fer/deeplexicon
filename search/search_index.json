{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to deeplexicon Docs DeePlexiCon is a tool to demultiplex barcoded nanopore direct RNA sequencing data, as well as train the models to do so. You can find the code here: DeePlexiCon . You can read the pre-print here: Barcoding and demultiplexing Oxford Nanopore native RNA sequencing reads with deep residual learning About DeePlexiCon DeePlexiCon is a tool to demultiplex barcoded direct RNA sequencing reads from Oxford Nanopore Technologies. Please note that the software has been tested and validated with a set of 4x20bp barcodes listed below: Barcode 1: GGCTTCTTCTTGCTCTTAGG Barcode 2: GTGATTCTCGTCTTTCTGCG Barcode 3: GTACTTTTCTCTTTGCGCGG Barcode 4: GGTCTTCGCTCGGTCTTATT Please see below further instructions about how to build barcoded direct RNA libraries. How to BUILD BARCODED LIBRARIES To build the barcoded libraries, the oligo DNA sequences listed below should be used instead of those coming with the direct RNA sequencing kit (RTA). The barcode is embedded in the oligoA sequence, which will be ligated to the RNA molecule during the library preparation. These oligos are designed to barcode libraries which have been enriched with oligodT beads (i.e. RNA should have polyA tail to anneal to oligoB). Each oligoA matches an oligoB. OligoA : OligoA_shuffle1: 5'-/5Phos/GGCTTCTTCTTGCTCTTAGGTAGTAGGTTC-3' (same as in ONT RTA): OligoA_shuffle2: 5'-/5Phos/GTGATTCTCGTCTTTCTGCGTAGTAGGTTC-3' OligoA_shuffle3: 5'-/5Phos/GTACTTTTCTCTTTGCGCGGTAGTAGGTTC-3' OligoA_shuffle4: 5'-/5Phos/GGTCTTCGCTCGGTCTTATTTAGTAGGTTC-3' OligoB: OligoB_shuffle1: 5\u2019-GAGGCGAGCGGTCAATTTTCCTAAGAGCAAGAAGAAGCCTTTTTTTTTT-3\u2019 (same as in ONT RTA) OligoB_shuffle2: 5\u2019-GAGGCGAGCGGTCAATTTTCGCAGAAAGACGAGAATCACTTTTTTTTTT-3\u2019 OligoB_shuffle3: 5\u2019-GAGGCGAGCGGTCAATTTTCCGCGCAAAGAGAAAAGTACTTTTTTTTTT-3\u2019 OligoB_shuffle4: 5\u2019-GAGGCGAGCGGTCAATTTTAATAAGACCGAGCGAAGACCTTTTTTTTTT-3\u2019 How to DEMULTIPLEX using DeePlexiCon Step 1: Predict barcodes for each read python3 deeplexicon.py dmux -p ~/top/fast5/path/ -f multi -m models/resnet20-final.h5 output.tsv Step 2: Split your base-called fastq data (please note that you can filter your output.tsv based on confidence score if you prefer to increase accuracy at the cost of recovery) python3 deeplexicon.py split -i output.tsv -q combined.fastq -o dmux_folder/ -s sample_name Notes Please note, the current algorithm has been trained to demultiplex the 4 barcodes shown above. It will not accurately demultiplex reads if different sequences are used. How to TRAIN DeePlexiCon with different barcodes python deeplexicon.py train --path /fast5/top/path/ --train_truth train.tsv --test_truth test.tsv -- val_truth val.tsv Getting help with DeePlexiCon If you have any troubles using DeePlexiCon, please leave an issue in the github repo of DeePlexiCon. Citing this work Martin A. Smith, Tansel Ersavas, James M. Ferguson, Huanle Liu, Morghan C. Lucas, Oguzhan Begik, Lilly Bojarski, Kirston Barton, Eva Maria Novoa. Barcoding and demultiplexing Oxford Nanopore direct RNA sequencing reads with deep residual learning. bioRxiv 2019","title":"Home"},{"location":"#welcome-to-deeplexicon-docs","text":"DeePlexiCon is a tool to demultiplex barcoded nanopore direct RNA sequencing data, as well as train the models to do so. You can find the code here: DeePlexiCon . You can read the pre-print here: Barcoding and demultiplexing Oxford Nanopore native RNA sequencing reads with deep residual learning","title":"Welcome to deeplexicon Docs"},{"location":"#about-deeplexicon","text":"DeePlexiCon is a tool to demultiplex barcoded direct RNA sequencing reads from Oxford Nanopore Technologies. Please note that the software has been tested and validated with a set of 4x20bp barcodes listed below: Barcode 1: GGCTTCTTCTTGCTCTTAGG Barcode 2: GTGATTCTCGTCTTTCTGCG Barcode 3: GTACTTTTCTCTTTGCGCGG Barcode 4: GGTCTTCGCTCGGTCTTATT Please see below further instructions about how to build barcoded direct RNA libraries.","title":"About DeePlexiCon"},{"location":"#how-to-build-barcoded-libraries","text":"To build the barcoded libraries, the oligo DNA sequences listed below should be used instead of those coming with the direct RNA sequencing kit (RTA). The barcode is embedded in the oligoA sequence, which will be ligated to the RNA molecule during the library preparation. These oligos are designed to barcode libraries which have been enriched with oligodT beads (i.e. RNA should have polyA tail to anneal to oligoB). Each oligoA matches an oligoB. OligoA : OligoA_shuffle1: 5'-/5Phos/GGCTTCTTCTTGCTCTTAGGTAGTAGGTTC-3' (same as in ONT RTA): OligoA_shuffle2: 5'-/5Phos/GTGATTCTCGTCTTTCTGCGTAGTAGGTTC-3' OligoA_shuffle3: 5'-/5Phos/GTACTTTTCTCTTTGCGCGGTAGTAGGTTC-3' OligoA_shuffle4: 5'-/5Phos/GGTCTTCGCTCGGTCTTATTTAGTAGGTTC-3' OligoB: OligoB_shuffle1: 5\u2019-GAGGCGAGCGGTCAATTTTCCTAAGAGCAAGAAGAAGCCTTTTTTTTTT-3\u2019 (same as in ONT RTA) OligoB_shuffle2: 5\u2019-GAGGCGAGCGGTCAATTTTCGCAGAAAGACGAGAATCACTTTTTTTTTT-3\u2019 OligoB_shuffle3: 5\u2019-GAGGCGAGCGGTCAATTTTCCGCGCAAAGAGAAAAGTACTTTTTTTTTT-3\u2019 OligoB_shuffle4: 5\u2019-GAGGCGAGCGGTCAATTTTAATAAGACCGAGCGAAGACCTTTTTTTTTT-3\u2019","title":"How to BUILD BARCODED LIBRARIES"},{"location":"#how-to-demultiplex-using-deeplexicon","text":"","title":"How to DEMULTIPLEX using DeePlexiCon"},{"location":"#step-1-predict-barcodes-for-each-read","text":"python3 deeplexicon.py dmux -p ~/top/fast5/path/ -f multi -m models/resnet20-final.h5 output.tsv","title":"Step 1: Predict barcodes for each read"},{"location":"#step-2-split-your-base-called-fastq-data-please-note-that-you-can-filter-your-outputtsv-based-on-confidence-score-if-you-prefer-to-increase-accuracy-at-the-cost-of-recovery","text":"python3 deeplexicon.py split -i output.tsv -q combined.fastq -o dmux_folder/ -s sample_name","title":"Step 2: Split your base-called fastq data (please note that you can filter your output.tsv based on confidence score if you prefer to increase accuracy at the cost of recovery)"},{"location":"#notes","text":"Please note, the current algorithm has been trained to demultiplex the 4 barcodes shown above. It will not accurately demultiplex reads if different sequences are used.","title":"Notes"},{"location":"#how-to-train-deeplexicon-with-different-barcodes","text":"python deeplexicon.py train --path /fast5/top/path/ --train_truth train.tsv --test_truth test.tsv -- val_truth val.tsv","title":"How to TRAIN DeePlexiCon with different barcodes"},{"location":"#getting-help-with-deeplexicon","text":"If you have any troubles using DeePlexiCon, please leave an issue in the github repo of DeePlexiCon.","title":"Getting help with DeePlexiCon"},{"location":"#citing-this-work","text":"Martin A. Smith, Tansel Ersavas, James M. Ferguson, Huanle Liu, Morghan C. Lucas, Oguzhan Begik, Lilly Bojarski, Kirston Barton, Eva Maria Novoa. Barcoding and demultiplexing Oxford Nanopore direct RNA sequencing reads with deep residual learning. bioRxiv 2019","title":"Citing this work"},{"location":"barcodes/","text":"How to BUILD BARCODED LIBRARIES To build the barcoded libraries, the oligo DNA sequences listed below should be used instead of those coming with the direct RNA sequencing kit (RTA). The barcode is embedded in the oligoA sequence, which will be ligated to the RNA molecule during the library preparation. These oligos are designed to barcode libraries which have been enriched with oligodT beads (i.e. RNA should have polyA tail to anneal to oligoB). Each oligoA matches an oligoB. OligoA : OligoA_shuffle1: 5'-/5Phos/GGCTTCTTCTTGCTCTTAGGTAGTAGGTTC-3' (same as in ONT RTA): OligoA_shuffle2: 5'-/5Phos/GTGATTCTCGTCTTTCTGCGTAGTAGGTTC-3' OligoA_shuffle3: 5'-/5Phos/GTACTTTTCTCTTTGCGCGGTAGTAGGTTC-3' OligoA_shuffle4: 5'-/5Phos/GGTCTTCGCTCGGTCTTATTTAGTAGGTTC-3' OligoB: OligoB_shuffle1: 5\u2019-GAGGCGAGCGGTCAATTTTCCTAAGAGCAAGAAGAAGCCTTTTTTTTTT-3\u2019 (same as in ONT RTA) OligoB_shuffle2: 5\u2019-GAGGCGAGCGGTCAATTTTCGCAGAAAGACGAGAATCACTTTTTTTTTT-3\u2019 OligoB_shuffle3: 5\u2019-GAGGCGAGCGGTCAATTTTCCGCGCAAAGAGAAAAGTACTTTTTTTTTT-3\u2019 OligoB_shuffle4: 5\u2019-GAGGCGAGCGGTCAATTTTAATAAGACCGAGCGAAGACCTTTTTTTTTT-3\u2019","title":"Barcodes"},{"location":"barcodes/#how-to-build-barcoded-libraries","text":"To build the barcoded libraries, the oligo DNA sequences listed below should be used instead of those coming with the direct RNA sequencing kit (RTA). The barcode is embedded in the oligoA sequence, which will be ligated to the RNA molecule during the library preparation. These oligos are designed to barcode libraries which have been enriched with oligodT beads (i.e. RNA should have polyA tail to anneal to oligoB). Each oligoA matches an oligoB. OligoA : OligoA_shuffle1: 5'-/5Phos/GGCTTCTTCTTGCTCTTAGGTAGTAGGTTC-3' (same as in ONT RTA): OligoA_shuffle2: 5'-/5Phos/GTGATTCTCGTCTTTCTGCGTAGTAGGTTC-3' OligoA_shuffle3: 5'-/5Phos/GTACTTTTCTCTTTGCGCGGTAGTAGGTTC-3' OligoA_shuffle4: 5'-/5Phos/GGTCTTCGCTCGGTCTTATTTAGTAGGTTC-3' OligoB: OligoB_shuffle1: 5\u2019-GAGGCGAGCGGTCAATTTTCCTAAGAGCAAGAAGAAGCCTTTTTTTTTT-3\u2019 (same as in ONT RTA) OligoB_shuffle2: 5\u2019-GAGGCGAGCGGTCAATTTTCGCAGAAAGACGAGAATCACTTTTTTTTTT-3\u2019 OligoB_shuffle3: 5\u2019-GAGGCGAGCGGTCAATTTTCCGCGCAAAGAGAAAAGTACTTTTTTTTTT-3\u2019 OligoB_shuffle4: 5\u2019-GAGGCGAGCGGTCAATTTTAATAAGACCGAGCGAAGACCTTTTTTTTTT-3\u2019","title":"How to BUILD BARCODED LIBRARIES"},{"location":"dmux/","text":"How to DEMULTIPLEX using DeePlexiCon Step 1: Predict barcodes for each read python3 deeplexicon.py dmux -p ~/top/fast5/path/ -f multi -m models/resnet20-final.h5 output.tsv Step 2: Split your base-called fastq data (please note that you can filter your output.tsv based on confidence score if you prefer to increase accuracy at the cost of recovery) python3 deeplexicon.py split -i output.tsv -q combined.fastq -o dmux_folder/ -s sample_name Notes Please note, the current algorithm has been trained to demultiplex the 4 barcodes shown above. It will not accurately demultiplex reads if different sequences are used. Any mix of the 4 currently trained barcodes will still work For more barcodes, see training section for more information","title":"Demultiplexing"},{"location":"dmux/#how-to-demultiplex-using-deeplexicon","text":"","title":"How to DEMULTIPLEX using DeePlexiCon"},{"location":"dmux/#step-1-predict-barcodes-for-each-read","text":"python3 deeplexicon.py dmux -p ~/top/fast5/path/ -f multi -m models/resnet20-final.h5 output.tsv","title":"Step 1: Predict barcodes for each read"},{"location":"dmux/#step-2-split-your-base-called-fastq-data","text":"(please note that you can filter your output.tsv based on confidence score if you prefer to increase accuracy at the cost of recovery) python3 deeplexicon.py split -i output.tsv -q combined.fastq -o dmux_folder/ -s sample_name","title":"Step 2: Split your base-called fastq data"},{"location":"dmux/#notes","text":"Please note, the current algorithm has been trained to demultiplex the 4 barcodes shown above. It will not accurately demultiplex reads if different sequences are used. Any mix of the 4 currently trained barcodes will still work For more barcodes, see training section for more information","title":"Notes"},{"location":"examples/","text":"","title":"Examples"},{"location":"install/","text":"How to install DeePlexiCon DeePlexiCon is built to work in python 3.7 and is quite sensitive to python versions, as well as library versions such as PyTs . Linux is also prefered, and no support for MacOS or Windows will be provided. All options excepty train should work on any OS if set up correctly, however we strongly advise using train on Ubuntu. Getting python3.7 and setting up environments Many systems won't have python3.7, so here is how to get it, and create environments with it. (on Ubuntu =16.04, 3.7 isn't in the default ppa repos) sudo add-apt-repository ppa:deadsnakes/ppa sudo apt-get update sudo apt install python3.7 python3.7-dev python3.7-venv Create environtment python3.7 -m venv ./Deeplexicon/ clone git repository git clone https://github.com/Psy-Fer/deeplexicon.git source and install requirements (CPU) Keep in mind, these versions are crucial to expected operation. source Deeplexicon/bin/activate pip install h5py Keras==2.2.4 pandas PyTs==0.8.0 Scikit-learn numba==0.45.0 TensorFlow==1.13.1 Done! That's it. To simplify running things, you can add deeplexicon.py to your $PATH Just add the following to your ~/.bashrc or run in your current shell export PATH=\"/path/to/deeplexicon:$PATH\"","title":"Installation"},{"location":"install/#how-to-install-deeplexicon","text":"DeePlexiCon is built to work in python 3.7 and is quite sensitive to python versions, as well as library versions such as PyTs . Linux is also prefered, and no support for MacOS or Windows will be provided. All options excepty train should work on any OS if set up correctly, however we strongly advise using train on Ubuntu.","title":"How to install DeePlexiCon"},{"location":"install/#getting-python37-and-setting-up-environments","text":"Many systems won't have python3.7, so here is how to get it, and create environments with it. (on Ubuntu =16.04, 3.7 isn't in the default ppa repos) sudo add-apt-repository ppa:deadsnakes/ppa sudo apt-get update sudo apt install python3.7 python3.7-dev python3.7-venv","title":"Getting python3.7 and setting up environments"},{"location":"install/#create-environtment","text":"python3.7 -m venv ./Deeplexicon/","title":"Create environtment"},{"location":"install/#clone-git-repository","text":"git clone https://github.com/Psy-Fer/deeplexicon.git","title":"clone git repository"},{"location":"install/#source-and-install-requirements-cpu","text":"Keep in mind, these versions are crucial to expected operation. source Deeplexicon/bin/activate pip install h5py Keras==2.2.4 pandas PyTs==0.8.0 Scikit-learn numba==0.45.0 TensorFlow==1.13.1","title":"source and install requirements (CPU)"},{"location":"install/#done","text":"That's it. To simplify running things, you can add deeplexicon.py to your $PATH Just add the following to your ~/.bashrc or run in your current shell export PATH=\"/path/to/deeplexicon:$PATH\"","title":"Done!"},{"location":"split/","text":"Split reads Splitting fastq reads using the dmux output file Split basecalled fastq data please note that you can filter your output.tsv based on confidence score if you prefer to increase accuracy at the cost of recovery python3 deeplexicon.py split -i output.tsv -q combined.fastq -o dmux_folder/ -s sample_name !-- Split mapped reads (.paf) for use in training python3 deeplexicon.py split --train -i mapped.paf -o split_train_output/ --","title":"Split fastq"},{"location":"split/#split-reads","text":"Splitting fastq reads using the dmux output file","title":"Split reads"},{"location":"split/#split-basecalled-fastq-data","text":"please note that you can filter your output.tsv based on confidence score if you prefer to increase accuracy at the cost of recovery python3 deeplexicon.py split -i output.tsv -q combined.fastq -o dmux_folder/ -s sample_name !--","title":"Split basecalled fastq data"},{"location":"split/#split-mapped-reads-paf-for-use-in-training","text":"python3 deeplexicon.py split --train -i mapped.paf -o split_train_output/ --","title":"Split mapped reads (.paf) for use in training"},{"location":"squig/","text":"Extra Squiggle tools These tools are extensions or modified versions of SquiggleKit . Extract squggles from fast5 files Equivalent to SquigglePull python3 deeplexicon.py squig -p /path/to/fast5s/ squiggles.tsv Segment squiggles from squiggle.tsv python3 deeplexicon.py squig -s squiggle.tsv segments.tsv","title":"Squiggle extras"},{"location":"squig/#extra-squiggle-tools","text":"These tools are extensions or modified versions of SquiggleKit .","title":"Extra Squiggle tools"},{"location":"squig/#extract-squggles-from-fast5-files","text":"Equivalent to SquigglePull python3 deeplexicon.py squig -p /path/to/fast5s/ squiggles.tsv","title":"Extract squggles from fast5 files"},{"location":"squig/#segment-squiggles-from-squiggletsv","text":"python3 deeplexicon.py squig -s squiggle.tsv segments.tsv","title":"Segment squiggles from squiggle.tsv"},{"location":"train/","text":"Train a custom model To train a custom model, a dataset with each barcode attached to a read that will uniquly map with regard to all other barcodes is required. Some examples: Synthetic RNA controls sequins attached to each barcode Different species for each barcode So long as when you map with minimap2, you can group the reads by expected barcode output. Input requirements Raw fast5 files Truth table of readID- barcode The truth table of readIDs should be in one-hot format, ie, readID 1 0 0 0 readID 0 1 0 0 readID 0 0 1 0 readID 0 0 0 1 With binary classification of barcode 1, 2, 3, 4 respectively. Of course, this can be extended to any number of barcodes required, and accross multiple runs. This should then be split into training , testing , and validation files. Do this by placing: - 80% of the reads into a training file. --train_truth - 10% of the reads into a testing file. --test_truth - 10% of the reads into a validation file. --val_truth Running the training Training requires a CUDA compatible GPU and the correct libraries installed. Commence training, with validation, with the following: python deeplexicon.py train --path /fast5/top/path/ --train_truth train.tsv --test_truth test.tsv -- val_truth val.tsv Full description train.add_argument('-p', '--path', nargs='+', help=\"Input path(s) of all used fast5s\") train.add_argument('-t', '--train_truth', nargs='+', help=\"Traiing truth set(s) in one-hot format eg: readID, 0, 0, 1, 0 for barcode 3 of 4 \") train.add_argument('-s', '--test_truth', nargs='+', help=\"Testing truth set(s) in one-hot format eg: readID, 0, 0, 1, 0 for barcode 3 of 4 \") train.add_argument('-u', '--val_truth', nargs='+', help=\"Validation truth set(s) in one-hot format eg: readID, 0, 0, 1, 0 for barcode 3 of 4 \") train.add_argument('-n', '--network', default=\"ResNet20\", help=\"Network to use (see table in docs)\") train.add_argument('--net_version', type=int, default=2, help=\"Network version to use (see table in docs)\") train.add_argument('-e', '--epochs', type=int, default=40, help=\"epochs to run\") train.add_argument('-v', '--verbose', action='count', default=0, help=\"Verbose output [v/vv/vvv]\")","title":"Train a model"},{"location":"train/#train-a-custom-model","text":"To train a custom model, a dataset with each barcode attached to a read that will uniquly map with regard to all other barcodes is required. Some examples: Synthetic RNA controls sequins attached to each barcode Different species for each barcode So long as when you map with minimap2, you can group the reads by expected barcode output.","title":"Train a custom model"},{"location":"train/#input-requirements","text":"Raw fast5 files Truth table of readID- barcode The truth table of readIDs should be in one-hot format, ie, readID 1 0 0 0 readID 0 1 0 0 readID 0 0 1 0 readID 0 0 0 1 With binary classification of barcode 1, 2, 3, 4 respectively. Of course, this can be extended to any number of barcodes required, and accross multiple runs. This should then be split into training , testing , and validation files. Do this by placing: - 80% of the reads into a training file. --train_truth - 10% of the reads into a testing file. --test_truth - 10% of the reads into a validation file. --val_truth","title":"Input requirements"},{"location":"train/#running-the-training","text":"Training requires a CUDA compatible GPU and the correct libraries installed. Commence training, with validation, with the following: python deeplexicon.py train --path /fast5/top/path/ --train_truth train.tsv --test_truth test.tsv -- val_truth val.tsv","title":"Running the training"},{"location":"train/#full-description","text":"train.add_argument('-p', '--path', nargs='+', help=\"Input path(s) of all used fast5s\") train.add_argument('-t', '--train_truth', nargs='+', help=\"Traiing truth set(s) in one-hot format eg: readID, 0, 0, 1, 0 for barcode 3 of 4 \") train.add_argument('-s', '--test_truth', nargs='+', help=\"Testing truth set(s) in one-hot format eg: readID, 0, 0, 1, 0 for barcode 3 of 4 \") train.add_argument('-u', '--val_truth', nargs='+', help=\"Validation truth set(s) in one-hot format eg: readID, 0, 0, 1, 0 for barcode 3 of 4 \") train.add_argument('-n', '--network', default=\"ResNet20\", help=\"Network to use (see table in docs)\") train.add_argument('--net_version', type=int, default=2, help=\"Network version to use (see table in docs)\") train.add_argument('-e', '--epochs', type=int, default=40, help=\"epochs to run\") train.add_argument('-v', '--verbose', action='count', default=0, help=\"Verbose output [v/vv/vvv]\")","title":"Full description"},{"location":"troubleshooting/","text":"Troubleshooting Some common issues while installing or running DeePlexiCon","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"Some common issues while installing or running DeePlexiCon","title":"Troubleshooting"}]}